#define _CRT_SECURE_NO_WARNINGS
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
struct bin_node
{
	int data;
	struct bin_node* left;//указатель н алевы и правые потомки дерева
	struct bin_node* right;
};
struct bin_tree
{
	struct bin_node* root; //указатель на корень дерева
	int count; //счетчик кол-ва вершин в дереве
};
bin_tree* bin_create(void)//функция создания дерева
{
	bin_tree* tree = (bin_tree*)malloc(sizeof(bin_tree)); 
	if (tree == NULL) //если не удалось выделить память, возвращает ноль
		return NULL;
	tree->root = NULL; 
	tree->count = 0;
	return tree;
}
int bin_search(const struct bin_tree* tree, int item)//функция поиска заданной вершины
{
	FILE* f = fopen("f.txt", "w");
	if (f == NULL) return -1;//проверяет, открылся ли файл
	const struct bin_node* node;
	if (tree == NULL) return -1; //если не удалось выделить память, возвращает -1
	node = tree->root; //присваивает адрес корня дерева
	fprintf(f, "%d: ", item);
	for (;;)
	{
		if (node == NULL) {
			fprintf(f, "Вершина не найдена\n "); //если вершина не найдена
			fclose(f);
			return 0;
		} 
		else if (item == node->data) {// если вершина найдена, возвращает 1
			fprintf(f, "%d Вершина найдена\n ", item);
			fclose(f);
			return 1;
		}
		else if (item > node->data) { //если искомая вершина больше данной, идем вправо
			fprintf(f, "%d ", node->data);
			node = node->right;
		}
		else {
			fprintf(f, "%d ", node->data);//если меньше, то влево
			node = node->left;
		} 
	}
	fprintf(f, "Вершина не найдена\n ");
	fclose(f);
}
int bin_insert(struct bin_tree* tree, int item)//функция добавления вершины дереву
{
	struct bin_node* node, ** nee;
	if (tree == NULL) return -1; //если не удалось выделить память, возвращает -1
	nee = &tree->root;
	node = tree->root;
	for (;;)
	{
		if (node == NULL) 
		{
			*nee = (bin_node*)malloc(sizeof * node); 
			node = *nee;
			if (node != NULL) //проверяет результат выделения памяти
			{
				node->data = item;
				node->left = node->right = NULL;//если вершина совпадает с имеющейся, +1 к кол-ву вершин
				tree->count++;
				return 1;
			}
			else
				return 0;
		}
		else if (item == node->data)
			return 2;
		else if (item > node->data)
		{
			nee = &node->right;//ищет подходящее место вершине
			node = node->right;
		}
		else
		{
			nee = &node->left;//ищет подходящее место вершине
			node = node->left;
		}
	}
}
int bin_delete(struct bin_tree* tree, int item)//функция удаления вершины
{
	struct bin_node** q, * z;
	if(tree == NULL) return -1;//если не удалось выделить память, возвращает -1
	q = &tree->root;//адрес следующего элемента
	z = tree->root;//следующий элемент
	for (;;)
	{
		if (z == NULL)
			return NULL;
		else if (item == z->data)
			break;
		else if (item > z->data)
		{
			q = &z->right;
			z = z->right;
		}
		else
		{
			q = &z->left;
			z = z->left;
		}
	}
	//Вершина не имеет правых потомков
	if (z->right == NULL)
		*q = z->left;
	else
	{
		struct bin_node* y = z->right;
		//Вершина имеет правых потомков
		if (y->left == NULL)
		{
			y->left = z->left;
			*q = y;
		}
		//Вершина имеет и левых и правых потомков, которые также имеют потомков
		else
		{
			struct bin_node* x = y->left;
			while (x->left != NULL)
			{
				y = x;
				x = y->left;
			}
			y->left = x->right;
			x->left = z->left;
			x->right = z->right;
			*q = x;
		}
	}
	tree->count--;
	free(z); 
	return 1;
}
void bin_print(struct bin_node* node, FILE* d) {//рекурсивная функция записи бинарного дерева 
	if (node == NULL)return;
	bin_print(node->left, d);
	fprintf(d, "%d ", node->data);
	bin_print(node->right, d);
}
int main() {
	setlocale(LC_ALL, "RUS");
	bin_tree* derevo = bin_create();//вызов функции создания бинарного дерева
	int mas[13] = { 06,04,20,03,06,12,20,21,91,67,05,60,98 };
	for (int i = 0; i < 13; i++) {
		bin_insert(derevo, mas[i]);//заполнение дерева
	}
	int find;
	printf("Введите ввершину для удаления\n");
	scanf("%d", &find);
	bin_delete(derevo, find);
	printf("Введите значение для поиска\n");
	scanf("%d", &find);
	bin_search(derevo, find);
	FILE* d = fopen("Derevo.txt", "w");
	if (d == NULL) return -1;
	bin_print(derevo->root, d);
	fclose(d);
	return 0;
}
