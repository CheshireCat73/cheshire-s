#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#define SIZE 13
int main()
{
	int DUG[SIZE][SIZE] = { {0} }; // матрица связей
	int MIN_WEG[SIZE]; // минимальное расстояние
	int FIKS[SIZE]; // посещенные вершины
	int temp=0, minindex, min, p, q;//p=i,j=q
	setlocale(LC_ALL, "RUS");
	//инициализация матрицы связей из файла
	FILE* f = fopen("C:\\Users\\Юлия\\Documents\\Институт\\ОСА_ДВ\\Лр\\ЛР 6/f.txt", "r");
	if (f == NULL) return -1;//в случае ошибки открытия файла
	for (int i = 0; i < 30; i++)
	{
		fscanf(f, "%d %d %d", &p, &temp, &q);
		DUG[p-1][q-1] = temp;
		DUG[q-1][p-1] = temp;
	}
	fclose(f);
	//вывод матрицы связей
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
			printf("%5d ", DUG[i][j]);
		printf("\n");
	}
	//инициализация вершин и расстояний
	for (int i = 0; i < SIZE; i++)
	{
		MIN_WEG[i] = 10000;
		FIKS[i] = 0;
	}
	int begin_index = 0;
	int end = 12;
	printf("Введите начальную и конечную вершины\n");
	scanf("%d %d", &begin_index, &end);
	begin_index--;
	end--;
	MIN_WEG[begin_index] = 0;
	//шаг алгоритма
	do {
		minindex = 10000;
		min = 10000;
		for (int i = 0; i < SIZE; i++)
		{ //если вершина не посещена и вес меньше min
			if ((FIKS[i] == 0) && (MIN_WEG[i] < min))
			{ 
				min = MIN_WEG[i];
				minindex = i;
			}
		}
		// добавляем найденный минимальный вес к текущему весу вершины
		//сравниваем с текущим минимальным весом вершины
		if (minindex != 10000)
		{
			for (int i = 0; i < SIZE; i++)
			{
				if (DUG[minindex][i] > 0)
				{
					temp = min + DUG[minindex][i];
					if (temp < MIN_WEG[i])
					{
						MIN_WEG[i] = temp;
					}
				}
			}
			FIKS[minindex] = 1;
		}
	} while (minindex < 10000);

	//восстановление пути
	int ver[SIZE]; // массив посещенных вершин
	ver[0] = end + 1; // начальный элемент - конечная вершина
	int k = 1; // индекс предыдущей вершины
	int weight = MIN_WEG[end]; // вес конечной вершины
	while (end != begin_index) // пока не дошли до начальной вершины
	{
		for (int i = 0; i < SIZE; i++) // просматриваем все вершины
			if (DUG[i][end] != 0) // если связь есть
			{
				int temp = weight - DUG[i][end]; // определяем вес пути из предыдущей вершины
				if (temp == MIN_WEG[i]) // если вес совпал с рассчитанным
				{ // значит из этой вершины и был переход
					weight = temp; // сохраняем новый вес
					end = i; // сохраняем предыдущую вершину
					ver[k] = i + 1; // и записываем ее в массив
					k++;
				}
			}
	}
	//вывод пути в файл
	FILE* r = fopen("C:\\Users\\Юлия\\Documents\\Институт\\ОСА_ДВ\\Лр\\ЛР 6/r.txt", "w");
	fprintf(r,"Вывод кратчайшего пути\n");
	for (int i = k - 1; i >= 0; i--)
		fprintf(r,"%3d ", ver[i]);
	fclose(r);
	return 0;
}
